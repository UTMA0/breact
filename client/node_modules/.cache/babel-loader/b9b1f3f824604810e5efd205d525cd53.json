{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BARDO\\\\Desktop\\\\youtube-transcript-project\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [videoUrl, setVideoUrl] = useState('');\n  const [transcript, setTranscript] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setTranscript('');\n    try {\n      const videoId = extractVideoId(videoUrl);\n      if (!videoId) {\n        throw new Error('Invalid YouTube URL');\n      }\n      const response = await axios.post('http://localhost:5000/api/transcript', {\n        videoId\n      });\n      setTranscript(response.data.transcript.join('\\n'));\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const extractVideoId = url => {\n    const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n    const match = url.match(regex);\n    return match ? match[1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Transcript Downloader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: videoUrl,\n        onChange: e => setVideoUrl(e.target.value),\n        placeholder: \"Enter YouTube video URL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Transcript\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), transcript && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Transcript:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JSYeZ2RI028SP2bDh2qKXJLm13I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","videoUrl","setVideoUrl","transcript","setTranscript","error","setError","handleSubmit","e","preventDefault","videoId","extractVideoId","Error","response","post","data","join","message","url","regex","match","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","style","color","_c","$RefreshReg$"],"sources":["C:/Users/BARDO/Desktop/youtube-transcript-project/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [videoUrl, setVideoUrl] = useState('');\r\n  const [transcript, setTranscript] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setError('');\r\n    setTranscript('');\r\n\r\n    try {\r\n      const videoId = extractVideoId(videoUrl);\r\n      if (!videoId) {\r\n        throw new Error('Invalid YouTube URL');\r\n      }\r\n\r\n      const response = await axios.post('http://localhost:5000/api/transcript', { videoId });\r\n      setTranscript(response.data.transcript.join('\\n'));\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const extractVideoId = (url) => {\r\n    const regex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\r\n    const match = url.match(regex);\r\n    return match ? match[1] : null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>YouTube Transcript Downloader</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={videoUrl}\r\n          onChange={(e) => setVideoUrl(e.target.value)}\r\n          placeholder=\"Enter YouTube video URL\"\r\n        />\r\n        <button type=\"submit\">Get Transcript</button>\r\n      </form>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      {transcript && (\r\n        <div>\r\n          <h2>Transcript:</h2>\r\n          <pre>{transcript}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}